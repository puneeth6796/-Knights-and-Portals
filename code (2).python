import sys
from collections import deque
from typing import List, Tuple

def is_valid(x: int, y: int, grid: List[List[int]]) -> bool:
    """Return true if (x,y) is within grid bounds and cell is empty (0)."""
    return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0

def bfs_with_teleport(grid: List[List[int]]) -> int:
    """
    BFS to find shortest path from top-left to bottom-right,
    with one teleport allowed between any two empty cells.
    Returns step count or -1 if impossible.
    """
    rows, cols = len(grid), len(grid[0])
    if grid[0][0] == 1 or grid[rows-1][cols-1] == 1:
        return -1

    directions = [(0,1),(1,0),(0,-1),(-1,0)]
    empty_cells = [(r, c) for r in range(rows) for c in range(cols) if grid[r][c] == 0]

    queue = deque([(0,0,0,False)])  # x, y, steps, tele_used
    visited = set([(0,0,False)])

    while queue:
        x, y, steps, tele_used = queue.popleft()
        if (x,y) == (rows-1, cols-1):
            return steps

        for dx, dy in directions:
            nx, ny = x+dx, y+dy
            if is_valid(nx, ny, grid) and (nx, ny, tele_used) not in visited:
                visited.add((nx, ny, tele_used))
                queue.append((nx, ny, steps+1, tele_used))

        if not tele_used:
            for tx, ty in empty_cells:
                if (tx, ty) != (x,y) and (tx, ty, True) not in visited:
                    visited.add((tx, ty, True))
                    queue.append((tx, ty, steps+1, True))

    return -1

def print_header():
    print("\n" + "="*60)
    print(" KNIGHTS AND PORTALS : SHORTEST PATH FINDER ".center(60))
    print("="*60 + "\n")

def print_instructions():
    print(
        "Enter grid data as rows of 0 and 1, separated by spaces.\n"
        "0 = empty cell, 1 = obstacle.\n"
        "Example grid 6x6 (copy-paste):\n"
        "0 0 1 0 0 0\n"
        "1 0 1 0 1 0\n"
        "0 0 0 0 1 0\n"
        "0 1 1 0 0 0\n"
        "0 0 0 1 1 1\n"
        "0 1 0 0 0 0\n"
        "Or press Enter to use the example grid.\n"
    )

def parse_input_grid(lines: List[str]) -> List[List[int]]:
    grid = []
    for line in lines:
        if not line.strip():
            continue
        row = []
        for part in line.strip().split():
            if part not in ('0', '1'):
                raise ValueError(f"Invalid cell value: {part}")
            row.append(int(part))
        grid.append(row)
    if not grid:
        raise ValueError("No input grid data detected.")
    # Check all rows same length
    row_length = len(grid[0])
    if any(len(row) != row_length for row in grid):
        raise ValueError("All rows must have the same number of columns.")
    return grid

def print_result(steps: int):
    card_width = 60
    RESET = "\033[0m"
    GREEN = "\033[92m"
    RED = "\033[91m"
    # Build box with message centered
    if steps == -1:
        msg = "No valid path found from start to finish."
        color = RED
        icon = "✗"
    else:
        msg = f"Shortest path length is {steps} steps."
        color = GREEN
        icon = "✓"

    top = "╔" + "═"*(card_width-2) + "╗"
    bottom = "╚" + "═"*(card_width-2) + "╝"
    padding = (card_width - 2 - len(msg) - 2) // 2  # 2 for icon, space
    line = "║" + " "*padding + f"{icon} {msg}" + " "*(card_width - 2 - len(msg) - 2 - padding) + "║"

    # Print with color if terminal supports
    if sys.stdout.isatty():
        print(color + top)
        print(line)
        print(bottom + RESET)
    else:
        print(top)
        print(line)
        print(bottom)

def main():
    print_header()
    print_instructions()

    user_lines = []
    print("Enter your grid (empty line to end):")
    while True:
        try:
            line = input()
        except EOFError:
            break
        if line.strip() == "":
            break
        user_lines.append(line)
    if not user_lines:
        user_lines = [
            "0 0 1 0 0 0",
            "1 0 1 0 1 0",
            "0 0 0 0 1 0",
            "0 1 1 0 0 0",
            "0 0 0 1 1 1",
            "0 1 0 0 0 0"
        ]
        print("\nUsing example grid:\n" + "\n".join(user_lines) + "\n")

    try:
        grid = parse_input_grid(user_lines)
    except ValueError as e:
        print(f"\nInput error: {e}")
        return

    steps = bfs_with_teleport(grid)
    print_result(steps)
    print()

if __name__=="__main__":
    main()
